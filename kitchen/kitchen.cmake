# 
# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Willow Garage, Inc. nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 
#
# The ecto kitchen macro
#

find_package(PythonInterp)

macro(init_ecto_kitchen)

  option(DESKTOP_TEST "Run tests that pop things up" OFF)

  if (CMAKE_COMPILER_IS_GNUCC)
    include(ecto/cmake/gcc.cmake)
  endif()

  include(ecto/cmake/git.cmake)

  git_status(${PROJECT_NAME})

  if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/ecto)
    MESSAGE(FATAL_ERROR "Expecting ecto as a subdirectory of your toplevel project!")
  endif()

  if (NOT KITCHEN_PROJECTS)
    set(KITCHEN_PROJECTS "ecto;${ARGN}")
  endif()

  string(REPLACE ";" " " KITCHEN_PROJECTS_STR "${KITCHEN_PROJECTS}")
  message(STATUS "Initializing kitchen with projects ${KITCHEN_PROJECTS_STR}")

  # a hack for kitchens that aren't called ecto_kitchen
  if(NOT ecto_kitchen_SOURCE_DIR)
    set(ecto_kitchen_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
    set(ecto_kitchen_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
  endif()

  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
  enable_testing()

  foreach(proj ${KITCHEN_PROJECTS})
    list(APPEND KITCHEN_PROJECTS_SOURCE_DIRS ${ecto_kitchen_SOURCE_DIR}/${proj})
  endforeach()

  add_subdirectory(ecto/kitchen/doc ${ecto_kitchen_BINARY_DIR}/doc)

  #this sets PREFIX_PATH so that kitchen projects may find *-config.cmake
  #that are generated by sister projects
  list(APPEND CMAKE_PREFIX_PATH  ${CMAKE_CURRENT_BINARY_DIR})

  foreach(proj ${KITCHEN_PROJECTS})
    message(STATUS "-~v/^\\v~- ${proj}")
    add_subdirectory(${proj})
  endforeach()

  #
  # for kitchen testing
  #
  configure_file(ecto/kitchen/util/build_as_standalones.sh.in
    build_as_standalones.sh
    @ONLY)

  configure_file(${ecto_kitchen_SOURCE_DIR}/ecto/kitchen/util/python_path.sh.in
    ${CMAKE_BINARY_DIR}/python_path.sh
    @ONLY
    )
  message(STATUS "To set up your python path you may source the file 'python_path.sh'")
  message(STATUS "  in the build directory.")

  macro(check_hashbangs SCRIPTDIR)
    file(GLOB_RECURSE _python_scripts ${CMAKE_CURRENT_SOURCE_DIR}/${SCRIPTDIR}/*.py)
    foreach(file ${_python_scripts})
      add_custom_command(TARGET check_hashbangs
        COMMAND ${ecto_kitchen_SOURCE_DIR}/ecto/kitchen/util/check_python_script_hashbang.sh ${file}
        )
    endforeach()
  endmacro()

  add_custom_target(check_hashbangs)

  foreach(proj ${KITCHEN_PROJECTS})
    check_hashbangs(${proj}/samples)
    check_hashbangs(${proj}/scripts)
  endforeach()

  add_test(kitchen_check_hashbangs ${CMAKE_MAKE_PROGRAM} -C ${CMAKE_BINARY_DIR} check_hashbangs)
endmacro()

